<?php
/**
 * TODO Here and there we need to attach different static resource files (stylesheets, javascript) to different plugin pages.
 * Currently we have an overhead: if some resource is needed on one page it is added globally so that each page contains it even if it not used.
 * What plugin needs is a mechanism to declare a mapping between plugin pages (urls) and attached resources. This should be a separate config file containing
 * mapping as array (see other files in the config folder for example) and a class that uses this config file to dynamically match url and include needed resources.
 * Such a class (lets call it Resource_Manager) could do more in the future: concatenate, obfuscate, minify.
 * The idea is not original, it is borrowed from the Grails resources plugin (http://grails.org/plugin/resources). Please see its docs to get an idea.
 * The Resource_Manager should replace methods like $this->register_browser_resources(), $this->load_browser_resources()
 *
 * @todo need to have php constants always available without making caller to them in in call to generate_jsrender_template() for example FARREACHES_PLUGIN_NAME
 * @todo extract class FarReaches_Resource_Manager and move static resource management there
 * @todo extract class FarReaches_Client_Config and move methods matching /^.*js_config.*$/ there
 * @todo extract class FarReaches_Templates and move template rendering methods (matching /^.*template.*$/) there
 */
class FarReaches_Ui_Handling extends FarReaches_Base {
    private $autogenerated_template_id;

    // used directly in javascript:
    // $.templates(farreaches_config.templates);
    // so the map must be (template_id, script_id)
    // see : get_created_jsrender_template
    const FARREACHES_JS_TEMPLATE = 'templates';
    const FARREACHES_JS_TEMPLATE_DATA = 'templates_data';
    const FARREACHES_BROWSER_RESOURCES_FILTER_HOOK = "farreaches_browser_resources";

    const FORCE_CODE_INTO_SCRIPT = true;

    const FARREACHES_CSS = 'farreachesCss';
    const FARREACHES_JS = 'farreachesJs';
    const BOOTSTRAP_CSS = 'bootstrapCSS';
    const FARREACHES_ACTIVATION_JS = 'farreaches_activation.js';
    const FARREACHES_EVENTBUS_JS = 'farreaches_eventbus.js';
    const FARREACHES_NOTIFICATIONS_MANAGER = 'farreaches_notificator.js';
    const FARREACHES_POST_STATUS_UPDATE = 'farreaches_post_status_update.js';
    const FARREACHES_JQUERY_SIMPLE_MODAL = 'farreachesJquerySimpleModal';
    const FARREACHES_SETTINGS_JS = 'farreaches_settings.js';
    const FARREACHES_COMPLETE_CONNECTION_CONFIGURATION_JS = 'farreaches_complete_connection_configuration.js';
    const FARREACHES_POST_EDIT_CATEGORIES_DECORATION_JS = 'farreaches_post_edit_categories_decoration.js';
    const FARREACHES_PREMIUM_JS = 'farreaches_premium.js';

    private $farreaches_config;
    private $template_directory;

    // HACK TODO : does this really need communications access???
    function __construct(
        FarReaches_Util $farReaches_Util,
        FarReaches_Communication $farReaches_Communication,
        $args = array()
    ) {
        parent::__construct($farReaches_Util, $farReaches_Communication);
        $plugin_url = $this->get_plugin_url();
        $args = wp_parse_args($args, array(
            'css' => $plugin_url . 'css/',
            'js' => $plugin_url . 'js/',
            'ext_lib' => $plugin_url . 'ext-lib/',
            'image_uri' => $plugin_url . 'img/',
            'template_directory' => $this->get_plugin_directory() . '/templates/'
        ));
        $this->farreaches_config = array(
            'css' => $args['css'],
            'js' => $args['js'],
            'ext_lib' => $args['ext_lib'],
            'image_uri' => $args['image_uri'],
            'versions' => array(array('js' => array('path' => $plugin_url . '/js/farreaches_notificator.js')))
        );
        $this->template_directory = $args['template_directory'];
        FarReaches_Validate::true(is_dir($this->template_directory), "Template directory '$this->template_directory' does not exist.");
        //$screen = get_current_screen();
        // $this->add_filter( "manage_{$screen->id}_columns", 'get_columns' );
        $this->register_browser_resources();
    }

    /**
     * Register new Javascript file.
     * usage note: $ver (version) for external libraries:
     * 1) without a specific version number,
     * 2) a lesser known library that may be casual about versions
     * 3) or where there are development versions of the library - use the YYYYMMDD as the version number (adding additional digits as necessary for intraday changes )
     *
     * @param string $handle Script name
     * @param string $src Script url
     * @param array $deps (optional) Array of script names on which this script depends
     * @param string|bool $ver (optional) Script version (used for cache busting), set to null to disable
     * @param bool $in_footer (optional) Whether to enqueue the script before </head> or before </body>
     */
    public function register_script( $handle, $src, $deps = array(), $ver = false, $in_footer = false ) {
        if ( $ver === false) {
            $plugin_version = FARREACHES_PLUGIN_VERSION;
            if ( substr($plugin_version, -8) !== 'SNAPSHOT') {
                $ver = $plugin_version;
            } else {
                $ver = null;
            }
        }
        // 3rd arg is array of dependency handles, 4th is version, 5th boolean in footer flag
        // at bottom of http://codex.wordpress.org/Function_Reference/wp_register_script
        wp_register_script($handle, $src, $deps, $ver, $in_footer);
    }

    /**
     * Register new style file.
     * usage note: $ver (version) for external libraries:
     * 1) without a specific version number,
     * 2) a lesser known library that may be casual about versions
     * 3) or where there are development versions of the library - use the YYYYMMDD as the version number (adding additional digits as necessary for intraday changes )
     *
     * @param string $handle Style name
     * @param string $src Style url
     * @param array $deps (optional) Array of Style names on which this Style depends
     * @param string|bool $ver (optional) Style version (used for cache busting), set to null to disable
     * @param bool $css_media (optional) css media selector
     */
    public function register_style($handle, $src, $deps = array(), $ver = false, $css_media=null) {
        if ( $ver === false) {
            $plugin_version = FARREACHES_PLUGIN_VERSION;
            if ( substr($plugin_version, -8) !== 'SNAPSHOT') {
                $ver = $plugin_version;
            } else {
                $ver = null;
            }
        }
        // 3rd arg is array of dependency handles, 4th is version, 5th is a css media value
        // at bottom of http://codex.wordpress.org/Function_Reference/wp_register_style
        wp_register_style($handle, $src, $deps, $ver, $css_media);
    }
    /**
     *
     * @param unknown_type $handle
     * @param unknown_type $src ( $this->farreaches_config['js'] is prefixed to this value. No leading '/' is needed )
     * @param unknown_type $deps
     */
    public function register_fr_script($handle, $src, $deps = array()) {
        $deps[] = self::FARREACHES_JS;
        $this->register_script($handle, $this->farreaches_config['js'] . $src, $deps);
    }
    /**
     * Register css and javascript files for later wp_enqueue as needed.
     * Note: that we are using the wordpress version of jquery, jquery-ui (and tinymce if we need it )
     * wordpress does a decent job of keeping up with the latest versions.
     */
    private function register_browser_resources() {
        // NOTE: jquery, jquery-ui-core, json2 are known and supplied by wordpress
        $jquery_ui_dep = array('jquery', 'jquery-ui-core');
        $this->register_style(self::FARREACHES_CSS, $this->farreaches_config['css'] . '/farreaches.css');
        $this->register_style('chosenCSS', $this->farreaches_config['ext_lib'] . 'css/chosen.css', null, '0.14.0');
        $this->register_script(self::FARREACHES_JQUERY_SIMPLE_MODAL, $this->farreaches_config['ext_lib'] . 'js/jquery.simplemodal.js', $jquery_ui_dep);
        $this->register_script('jsrender', $this->farreaches_config['ext_lib'] . 'js/jsviews/jsrender.js', $jquery_ui_dep,
                '20130630');
        $this->register_script('jsobservable', $this->farreaches_config['ext_lib'] . 'js/jsviews/jquery.observable.js', array('jquery', 'jquery-ui-core', 'jsrender'),
                '20130630');
        $this->register_script('jsviews', $this->farreaches_config['ext_lib'] . 'js/jsviews/jquery.views.js', array('jquery', 'jquery-ui-core', 'jsrender', 'jsobservable'),
                '20130630');
        $this->register_script('chosen', $this->farreaches_config['ext_lib'] . 'js/chosen.jquery.js', array('jquery', 'jquery-ui-core'),
                '0.14.0');

        $this->register_script('serializeObject', $this->farreaches_config['ext_lib'] . 'js/serializeObject.js', array('jquery'));
        $this->register_script('jquery-powertip', $this->farreaches_config['ext_lib'] . 'js/jquery-powertip.js', $jquery_ui_dep,
                '20130701');

        $this->register_script(self::FARREACHES_JS, $this->farreaches_config['js'] . 'farreaches.js', array('jquery', 'jquery-ui-core', 'jsviews'));
        $this->register_fr_script(self::FARREACHES_ACTIVATION_JS, 'farreaches_activation.js', array('jquery', 'jquery-ui-core'));
        $this->register_fr_script(self::FARREACHES_COMPLETE_CONNECTION_CONFIGURATION_JS, 'farreaches_complete_connection_configuration.js');
        $this->register_fr_script(self::FARREACHES_EVENTBUS_JS, 'farreaches_eventbus.js', array('jquery', 'jquery-ui-core', 'json2', 'serializeObject'));
        $this->register_fr_script(self::FARREACHES_NOTIFICATIONS_MANAGER, 'farreaches_notificator.js', array('jquery', 'jquery-ui-core', 'jsviews', self::FARREACHES_EVENTBUS_JS));
        $this->register_fr_script(self::FARREACHES_POST_STATUS_UPDATE, 'farreaches_post_status_update.js', array('jquery', 'jquery-ui-core', self::FARREACHES_EVENTBUS_JS));
        $this->register_fr_script(self::FARREACHES_SETTINGS_JS, 'farreaches_settings.js', array(self::FARREACHES_EVENTBUS_JS, 'jquery-ui-accordion'));
        $this->register_fr_script(self::FARREACHES_POST_EDIT_CATEGORIES_DECORATION_JS, 'farreaches_post_edit_categories_decoration.js');
        $this->register_fr_script(self::FARREACHES_PREMIUM_JS, 'farreaches_premium.js', array(self::FARREACHES_JQUERY_SIMPLE_MODAL, 'jquery'));
    }

    public function get_extserv_img_uri($img, $qualifier) {
        return $this->farreaches_config['image_uri'] . "/socialicons/" . $img . "_" . $qualifier . ".png";
    }

    public function get_status_img_uri($img, $qualifier) {
        return $this->farreaches_config['image_uri'] . "/status/" . $img . "_" . $qualifier . ".png";
    }

    /**
     * Add a JS config key-value pair which will be available for *.js scripts in global window.FARREACHES.config object.
     *
     * @param string $key
     * @param (string|int|array|etc..) $data will be automatically serialized to JSON.
     */
    public function add_js_config($key, $data) {
    	FarReaches_Validate::false($this->browser_resources_already_loaded,
    		'browser resources have already been rendered at the page. Attach your add_js_config() invocation to an earlier hook.');
        $this->farreaches_config[$key] = $data;
    }

    // NOTE: after modifying the returned array - need to call add_js_config to put the new array into place.
    // I tried messing with references so that the returned array would be modifiable but had no luck.
    private function get_js_config($key) {
        if (!isset($this->farreaches_config[$key])) {
            $this->farreaches_config[$key] = array();
        }
        return $this->farreaches_config[$key];
    }

    private $browser_resources_already_loaded = false;

    /**
     * This function makes sure all the style sheets and javascript is available for the plugin's javascript
     */
    function load_browser_resources() {
        wp_enqueue_style(self::FARREACHES_CSS);
        wp_enqueue_script(self::FARREACHES_JS);
        wp_enqueue_script(self::FARREACHES_NOTIFICATIONS_MANAGER);
        wp_enqueue_script(self::FARREACHES_EVENTBUS_JS);
        wp_enqueue_script(self::FARREACHES_JQUERY_SIMPLE_MODAL);
        $js_config = apply_filters(self::FARREACHES_BROWSER_RESOURCES_FILTER_HOOK, $this->farreaches_config);

        // pass config to javascript
        $json_config = $this->json_encode($js_config);
        $escaped_json_config = addslashes($json_config);
        echo "<script>if (typeof(FARREACHES) == 'undefined') FARREACHES = {}; FARREACHES.config = JSON.parse(\"$escaped_json_config\");</script>";

        $this->browser_resources_already_loaded = true;
    }

    /**
     * $template: Render the jsrender template - intended to be a constant object
     * key : id, script element id is based on the template key
     * uri : path to template
     * code : template to insert directly
     *
     * $add_template_result_holder: true means add a div with an id based on the template key, or a string that is the jquery selector string.
     *
     * $data_map : array(
     *      <json_key> => <javascript code>
     * );
     * Example:
     *  $template = array('key' => 'welcome' );
     *  $data = array('user_name' => "document.getElementById('userName').val()");
     *  generate_jsrender_template($template, true, $data);
     */
    public function generate_jsrender_template($template, $add_template_result_holder = true, $data_map = array(), $wrap = true) {
        $template_key = $template['key'];
        $template_script_id = $this->get_created_jsrender_template($template);
        $this->debug_log("Rendering out template (" . $template_key . "," . $template_script_id . ")");

        if ($add_template_result_holder == true) {
            // add in an index so that a template can be inserted multiple times for example when a template is used to create a table row
            // note that this means the template must not have html ids in it.
            $data_index = sprintf('farreaches-replaced-%s-%d', $template_key, $this->autogenerated_template_id++);
            $add_template_result_holder = '#' . $data_index;
            $custom_attributes = isset($template['custom_attrs']) ? $template['custom_attrs'] : '';
            $inserted = sprintf("<div id='%s' %s></div>", $data_index, $custom_attributes);
        } else {
            $data_index = $add_template_result_holder;
            $inserted = '';
        }

        $template_data = array();
        if (is_array($data_map)) {
            $template_data['data'] = array();
            foreach ($data_map as $json_key => $javascript_code) {
                if (!isset($javascript_code)) {
                    $this->debug_log("JSON key = ", $json_key, " has no value. Template name = ", $template);
                }
                $template_data['data'][$json_key] = $javascript_code;
            }
        }

        // these 2 are conceptually different and may have different values.
        $template_data['template_id'] = $template_key;
        $template_data['template_script_id'] = $template_script_id;
        $template_data['dom_selector'] = $add_template_result_holder;

        $templates_data = $this->get_js_config(self::FARREACHES_JS_TEMPLATE_DATA);
        $templates_data[$data_index] = $template_data;
        $this->add_js_config(self::FARREACHES_JS_TEMPLATE_DATA, $templates_data);
        $this->output_farreaches_html($inserted, $wrap);
    }

    function output_farreaches_html($template, $wrap = true) {
        $paid_classes = "fr-paid-" . implode(" fr-paid-", FarReaches_Subscription::get_feature_set($this->farReaches_Util)->get_active_features());
        if ($wrap) {
            echo "<div class='wrap farreaches ".$paid_classes."'>" . $template . '</div>';
        } else {
        	echo "<div class='farreaches ".$paid_classes."'>" . $template . '</div>';
        }
    }

    /**
     * Used to make sure that a template is only inserted once into the html.
     * generates:
     *  <script id="farreaches-tmpl-<template-key>">..(contents of the template file)..</script> only once per page.
     * @return string $template_config
     */
    private function get_created_jsrender_template($template, array &$processed_templates = array()) {
        $template_key = $template['key'];
        if (in_array($template_key, $processed_templates)) {
            return false;
        }
        $processed_templates[] = $template_key;
        $templates_config = $this->get_js_config(self::FARREACHES_JS_TEMPLATE);
        if (!isset($templates_config[$template_key])) {
            $scriptId = sprintf('farreaches-tmpl-%s', $template_key);

            if (!empty($template['code'])) {
                $code = $template['code'];
            } else if (self::FORCE_CODE_INTO_SCRIPT) {
                // jsrender does not support the 'src' attribute in <script>
                $code = $this->get_template_file($template_key);
            } else {
                $code = null; // to hide warning
                FarReaches_Validate::should_never_reach_here('Template code is absent. Template key is: '.$template_key.'.');
            }

            //Lookup and load nested templates.
            $template_names = array();
            preg_match_all('/tmpl="#(.*?)\"/i', $code, $template_names);
            foreach ($template_names[1] as $nested_template_name) {
                $nested_template_id = $this->get_created_jsrender_template(array('key' => $nested_template_name), $processed_templates);
                if (!$nested_template_id) {
                    $nested_template_id = $scriptId;
                }
                $code = str_replace('tmpl="#' . $nested_template_name . '"', 'tmpl="#' . $nested_template_id . '"', $code);
            }

            if (@$code) {
                printf('<script id="%s" type="text/x-jsrender">%s</script>' . "\n", $scriptId, $code);
            } else {
                $template_files_list = print_r(scandir($this->template_directory), true);
                FarReaches_Validate::should_never_reach_here("Template code wasn't loaded. Either is template file is missing or malformed. Template key: $template_key . Available template files are:\n $template_files_list");
            }
            // NOTE: the templates_config array is passed in the javascript to $.templates()
            // So it MUST be $template_key => '#scriptid' - don't get fancy!
            $templates_config[$template_key] = '#' . $scriptId;
            $this->add_js_config(self::FARREACHES_JS_TEMPLATE, $templates_config);
        }
        return substr($templates_config[$template_key], 1);
    }

    /**
     * @param string $template_key
     * @return string the template file contents for the template with the supplied key.
     */
    private function get_template_file($template_key) {
        $template_file_name = $this->template_directory . $template_key . '.tmpl';
        if (file_exists($template_file_name)) {
            return file_get_contents($template_file_name);
        } else {
            return null;
        }
    }

    /**
     *
     */
    public function output_button($form_name, $notification_topic, $button_text, $success, $failure = null) {
        echo <<<EOM
            <button id="submit-$form_name" class="button button-primary" data-publish-event="!form#$form_name"
                    data-publish-topic="$notification_topic"
                    data-publish-label="Saving.."
                    data-publish-disabled-after="false"
                    data-publish-success="$success"
                    data-publish-failure="$failure"
                >$button_text</button>
EOM;
    }
}
