{"version":3,"sources":["webpack:///admin-appointments-list.js","webpack:///webpack/bootstrap 00dc85f1af28a3e65166?323e****","webpack:///./_src/admin/js/admin-appointments-list.dev.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","AppointmentsAdmin","window","global","strings","$","AppointmentsList","options","toggle_selected_export","length","show","hide","defaults","servicesPrice","this","extend","isEditing","$exportButton","$addNew","$addNewSpinner","$editAppointment","$table","click","e","confirm","deleteRecordsConfirm","removeActiveEditorForms","showEditorForm","result","prepend","bind","appId","target","data","row","$spinner","find","after","on","val","parents","saveEditor","fetchWorkerHours","button","$form","closest","checkedApps","type","is","each","append","attr","toggle","document","app_id","callback","action","col_len","columns","nonce","nonces","addNew","post","ajaxurl","response","error","alert","initDatepicker","unexpectedError","datepicker","dateFormat","firstDay","AppointmentsDateSettings","weekStart","$select","$worker_id","$parent","$app_id","$location","$slots_list","$selected_slot","$unknown_slot","children","editApp","worker_id","selected_slot","location_id","error_msg","class","html","delay","fadeOut","slots","JSON","parse","message","empty","text","key","$button","fields","map","fieldName","cancel_button","resend","trigger","parseInt","location","reload","innerHTML","appointmentsList","Appi18n","jQuery"],"mappings":"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","file":"admin-appointments-list.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nAppointmentsAdmin = window.AppointmentsAdmin || {};\n( function( global, strings, $ ) {\n    \"use strict\";\n\n    /**\n     * Constructor\n     *\n     * @param options\n     * @returns {AppointmentsList}\n     * @constructor\n     */\n    function AppointmentsList( options ) {\n        // Set default options array\n        var defaults = {\n            servicesPrice: []\n        };\n        this.options = $.extend( {}, defaults, options );\n\n        this.isEditing = false;\n\n        // Export button\n        this.$exportButton = $('.app-export_trigger');\n\n        // Add new appointment button\n        this.$addNew = $(\".add-new-h2\");\n        this.$addNewSpinner = $(\".add-new-waiting\");\n\n        // Edit single appointment\n        this.$editAppointment = $(\".app-inline-edit\");\n\n        // App list table\n        this.$table = $('table.appointments');\n\n        // Confirm removal of selected appointments\n        $(\"#delete_removed\").click( function(e) {\n            return confirm(strings.deleteRecordsConfirm);\n        });\n\n        // Show inline editor when add new button is clicked\n        this.$addNew.click( function() {\n            this.$addNewSpinner.show();\n            this.removeActiveEditorForms();\n            this.showEditorForm( 0, function( result ) {\n                this.$table.prepend(result);\n                this.$addNewSpinner.hide();\n            });\n        }.bind( this ) );\n\n        // Show inline editor when editing a single appointment\n        this.$editAppointment.click(function(e) {\n            var appId = $(e.target).data( 'app-id' );\n            var row = $('#app-' + appId );\n            var $spinner = row.find(\".waiting\");\n\n            $spinner.show();\n\n            this.removeActiveEditorForms();\n\n            this.showEditorForm( appId, function( result ) {\n                $spinner.hide();\n                row.hide();\n                row.after( result );\n            });\n        }.bind(this));\n\n        // Cancel edition in inline editor\n        this.$table.on( 'click', '.cancel', this.removeActiveEditorForms.bind(this) );\n\n        // Change service price as selection changes\n        this.$table.on( 'change', 'select[name=\"service\"]', function(e) {\n            var target = $(e.target);\n            var value = target.val();\n            if ( this.options.servicesPrice[ value ] ) {\n                target.parents(\".inline-edit-col\")\n                    .find( 'input[name=\"price\"]' )\n                    .val( this.options.servicesPrice[ value ] );\n            }\n        }.bind(this));\n\n        this.$table.on( 'click', '.save', this.saveEditor.bind(this) );\n        \n        this.$table.on( 'change', 'select[name=worker]', this.fetchWorkerHours.bind(this) );\n\n        // @TODO Refactor\n        this.$exportButton.click( function(e) {\n            var button = $(e.target),\n                $form = button.closest(\"form\"),\n                checkedApps = $(\".column-delete.app-check-column :checked\"),\n                type = $form.find(\"#app-export_type\");\n\n            if (button.is(\"#app-export-selected\") && checkedApps.length) {\n                checkedApps.each(function () {\n                    $form.append(\"<input type='hidden' name='app[]' value='\" + $(this).val() + \"' />\");\n                });\n                type.val(\"selected\");\n                return true;\n            } else if (button.is(\"#app-export-type\")) {\n                $form.append(\"<input type='hidden' name='status' value='\" + button.attr(\"data-type\") + \"' />\");\n                type.val(\"type\");\n                return true;\n            } else if (button.is(\"#app-export-all\")) {\n                type.val(\"all\");\n                return true;\n            }\n            return false;\n        });\n\n        $(\".app-change-status-btn\").click(function(e){\n            var button = $(this);\n            var selection = $(\"th.app-check-column input:checkbox:checked\");\n            // var data = { 'app[]' : []};\n            selection.each(function() {\n                // data['app[]'].push($(this).val());\n                button.after('<input type=\"hidden\" name=\"app[]\" value=\"'+$(this).val()+'\"/>');\n            });\n\n            return true;\n        });\n\n        $(\".info-button\").click(function(){\n            $(\".status-description\").toggle('fast');\n        });\n\n        function toggle_selected_export () {\n            var $sel = $(\"#the-list .check-column :checked\");\n            if ($sel.length) $(\"#app-export-selected\").show();\n            else $(\"#app-export-selected\").hide();\n        }\n\n        $(document).on(\"change\", \".check-column input, .app-column-cb input\", toggle_selected_export);\n        $(toggle_selected_export);\n\n\n        return this;\n    }\n\n    /**\n     * Hide all active inline editors and show all rows in the table\n     */\n    AppointmentsList.prototype.removeActiveEditorForms = function() {\n        this.$table.find( '.inline-edit-row' ).hide();\n        $(\".app-tr\").show();\n    };\n\n\n    /**\n     * Show the inline editor form\n     *\n     * @param app_id Appointment ID\n     * @param callback Callback function to execute after success\n     */\n    AppointmentsList.prototype.showEditorForm = function( app_id, callback ) {\n        var data = {\n            action: 'inline_edit',\n            col_len: this.options.columns,\n            app_id: app_id,\n            nonce: this.options.nonces.addNew,\n            columns: this.options.columns\n        };\n\n        return $.post(ajaxurl, data, function (response) {\n                if ( response && response.error ) {\n                    alert(response.error);\n                }\n                else if (response && typeof callback === 'function' ) {\n                    callback.call( this, [ response.result ] );\n                    this.initDatepicker();\n                }\n                else {\n                    alert( strings.unexpectedError );\n                }\n            }.bind(this),\n            'json'\n        );\n    };\n\n    /**\n     * Initializes datepickers\n     */\n    AppointmentsList.prototype.initDatepicker = function() {\n        $( '.datepicker' ).datepicker({\n            dateFormat: 'yy-mm-dd',\n            firstDay: AppointmentsDateSettings.weekStart\n        });\n    };\n    \n    /**\n    * Fetches the working hours of the selected provider with ajax\n    */\n    AppointmentsList.prototype.fetchWorkerHours = function(e) {\n        \n        var $select             = $( e.target ),\n            $worker_id          = $select.val(),            \n            $parent             = $select.parents( \".inline-edit-row\" ),\n            $app_id             = $parent.find( \"select[name=service]\" ).val(),\n            $location           = $parent.find( \"select[name=location]\" ),\n            $slots_list         = $parent.find( \"select[name=time]\" ),\n            $selected_slot      = $slots_list.val(),\n            $unknown_slot       = $slots_list.children('option:first'),\n            $spinner            = $parent.find( '.waiting' ),\n            data                = {};        \n\n        $spinner.show();\n\n        /**\n        * Set up ajax data\n        */\n        data.nonce          = this.options.nonces.editApp;\n        data.action         = 'inline_fetch_worker_slots';\n        data.worker_id      = $worker_id;\n        data.app_id         = $app_id;\n        data.selected_slot  = $selected_slot;\n\n        // @TODO: Check if date is set and include that too in ajax data\n\n        if ( typeof( $location ) != \"undefined\" ) {\n            data.location_id         = $location.val();\n        }\n\n        /**\n        * Handle ajax response\n        */\n        $.post(ajaxurl, data, function(response) {\n\n            $spinner.hide();\n\n            // When receiving an error message\n            if ( response && response.error ){\n                \n                var error_msg = $('<div />',{\n                    'class' : 'error'\n                }).html( response.error );\n\n                $select.after( error_msg );\n                error_msg.delay(10000).fadeOut('slow');\n\n                return;\n\n            } else if (response) {\n                // Received the new time slots for worker\n                 var slots = JSON.parse( response.message );\n\n                // Empty the old slots list and add the unknown option\n                $slots_list.empty().append( '<option value=\"' + $unknown_slot.val() + '\">' + $unknown_slot.text() + '</option>' );\n\n                // Add the new timeslots\n                for ( var key in slots ) {\n                    $slots_list.append( slots[key] );\n                }\n            } else {\n                alert( strings.unexpectedError );\n                return;\n            }\n\n\n        }.bind(this),'json');\n    }\n\n    AppointmentsList.prototype.saveEditor = function(e) {\n        var $button = $(e.target);\n        var target = $button.parents(\".inline-edit-row\");\n        var $spinner = target.find(\".waiting\");\n\n        $spinner.show();\n\n        var fields = [\n            'user',\n            'cname',\n            'email',\n            'phone',\n            'address',\n            'city',\n            'service',\n            'worker',\n            'price',\n            'date',\n            'time',\n            'note',\n            'status'\n        ];\n\n        var data = {};\n        $.map( fields, function( fieldName ) {\n            if ( 'cname' === fieldName ) {\n                data.name = target.find( '[name=\"' + fieldName + '\"]').val();\n            }\n            else {\n                data[fieldName] = target.find( '[name=\"' + fieldName + '\"]').val();\n            }\n        });\n\n        var app_id = $button.data('app-id');\n        var cancel_button = target.find('.cancel');\n        data.app_id = app_id;\n        data.resend = target.find('input[name=\"resend\"]').is(':checked') ? 1 : 0;\n        data.nonce = this.options.nonces.editApp;\n        data.action = 'inline_edit_save';\n        $(document).trigger('app-appointment-inline_edit-save_data', [data, target]);\n\n        $.post(ajaxurl, data, function(response) {\n            $spinner.hide();\n            if ( response && response.error ){\n                target.find(\".error\").html(response.error).show().delay(10000).fadeOut('slow');\n                return;\n            } else if (response) {\n                target.find(\".error\").html(response.message).show().delay(10000).fadeOut('slow');\n            } else {\n                alert( strings.unexpectedError );\n                return;\n            }\n\n            if (!(app_id && parseInt(app_id, 10)) && response && response.app_id) {\n                location.reload();\n            }\n            else {\n                // this.removeActiveEditorForms();\n            }\n\n            if ( response.reload ){\n                location.reload();\n            }\n            cancel_button[0].innerHTML = 'Close';\n        }.bind(this),'json');\n    };\n\n    /**\n     * Helper constructor function\n     *\n     * @param options\n     * @returns {AppointmentsList}\n     */\n    global.appointmentsList = function( options ) {\n        return new AppointmentsList( options );\n    };\n\n})( AppointmentsAdmin, Appi18n, jQuery );\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// admin-appointments-list.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 00dc85f1af28a3e65166","AppointmentsAdmin = window.AppointmentsAdmin || {};\n( function( global, strings, $ ) {\n    \"use strict\";\n\n    /**\n     * Constructor\n     *\n     * @param options\n     * @returns {AppointmentsList}\n     * @constructor\n     */\n    function AppointmentsList( options ) {\n        // Set default options array\n        var defaults = {\n            servicesPrice: []\n        };\n        this.options = $.extend( {}, defaults, options );\n\n        this.isEditing = false;\n\n        // Export button\n        this.$exportButton = $('.app-export_trigger');\n\n        // Add new appointment button\n        this.$addNew = $(\".add-new-h2\");\n        this.$addNewSpinner = $(\".add-new-waiting\");\n\n        // Edit single appointment\n        this.$editAppointment = $(\".app-inline-edit\");\n\n        // App list table\n        this.$table = $('table.appointments');\n\n        // Confirm removal of selected appointments\n        $(\"#delete_removed\").click( function(e) {\n            return confirm(strings.deleteRecordsConfirm);\n        });\n\n        // Show inline editor when add new button is clicked\n        this.$addNew.click( function() {\n            this.$addNewSpinner.show();\n            this.removeActiveEditorForms();\n            this.showEditorForm( 0, function( result ) {\n                this.$table.prepend(result);\n                this.$addNewSpinner.hide();\n            });\n        }.bind( this ) );\n\n        // Show inline editor when editing a single appointment\n        this.$editAppointment.click(function(e) {\n            var appId = $(e.target).data( 'app-id' );\n            var row = $('#app-' + appId );\n            var $spinner = row.find(\".waiting\");\n\n            $spinner.show();\n\n            this.removeActiveEditorForms();\n\n            this.showEditorForm( appId, function( result ) {\n                $spinner.hide();\n                row.hide();\n                row.after( result );\n            });\n        }.bind(this));\n\n        // Cancel edition in inline editor\n        this.$table.on( 'click', '.cancel', this.removeActiveEditorForms.bind(this) );\n\n        // Change service price as selection changes\n        this.$table.on( 'change', 'select[name=\"service\"]', function(e) {\n            var target = $(e.target);\n            var value = target.val();\n            if ( this.options.servicesPrice[ value ] ) {\n                target.parents(\".inline-edit-col\")\n                    .find( 'input[name=\"price\"]' )\n                    .val( this.options.servicesPrice[ value ] );\n            }\n        }.bind(this));\n\n        this.$table.on( 'click', '.save', this.saveEditor.bind(this) );\n        \n        this.$table.on( 'change', 'select[name=worker]', this.fetchWorkerHours.bind(this) );\n\n        // @TODO Refactor\n        this.$exportButton.click( function(e) {\n            var button = $(e.target),\n                $form = button.closest(\"form\"),\n                checkedApps = $(\".column-delete.app-check-column :checked\"),\n                type = $form.find(\"#app-export_type\");\n\n            if (button.is(\"#app-export-selected\") && checkedApps.length) {\n                checkedApps.each(function () {\n                    $form.append(\"<input type='hidden' name='app[]' value='\" + $(this).val() + \"' />\");\n                });\n                type.val(\"selected\");\n                return true;\n            } else if (button.is(\"#app-export-type\")) {\n                $form.append(\"<input type='hidden' name='status' value='\" + button.attr(\"data-type\") + \"' />\");\n                type.val(\"type\");\n                return true;\n            } else if (button.is(\"#app-export-all\")) {\n                type.val(\"all\");\n                return true;\n            }\n            return false;\n        });\n\n        $(\".app-change-status-btn\").click(function(e){\n            var button = $(this);\n            var selection = $(\"th.app-check-column input:checkbox:checked\");\n            // var data = { 'app[]' : []};\n            selection.each(function() {\n                // data['app[]'].push($(this).val());\n                button.after('<input type=\"hidden\" name=\"app[]\" value=\"'+$(this).val()+'\"/>');\n            });\n\n            return true;\n        });\n\n        $(\".info-button\").click(function(){\n            $(\".status-description\").toggle('fast');\n        });\n\n        function toggle_selected_export () {\n            var $sel = $(\"#the-list .check-column :checked\");\n            if ($sel.length) $(\"#app-export-selected\").show();\n            else $(\"#app-export-selected\").hide();\n        }\n\n        $(document).on(\"change\", \".check-column input, .app-column-cb input\", toggle_selected_export);\n        $(toggle_selected_export);\n\n\n        return this;\n    }\n\n    /**\n     * Hide all active inline editors and show all rows in the table\n     */\n    AppointmentsList.prototype.removeActiveEditorForms = function() {\n        this.$table.find( '.inline-edit-row' ).hide();\n        $(\".app-tr\").show();\n    };\n\n\n    /**\n     * Show the inline editor form\n     *\n     * @param app_id Appointment ID\n     * @param callback Callback function to execute after success\n     */\n    AppointmentsList.prototype.showEditorForm = function( app_id, callback ) {\n        var data = {\n            action: 'inline_edit',\n            col_len: this.options.columns,\n            app_id: app_id,\n            nonce: this.options.nonces.addNew,\n            columns: this.options.columns\n        };\n\n        return $.post(ajaxurl, data, function (response) {\n                if ( response && response.error ) {\n                    alert(response.error);\n                }\n                else if (response && typeof callback === 'function' ) {\n                    callback.call( this, [ response.result ] );\n                    this.initDatepicker();\n                }\n                else {\n                    alert( strings.unexpectedError );\n                }\n            }.bind(this),\n            'json'\n        );\n    };\n\n    /**\n     * Initializes datepickers\n     */\n    AppointmentsList.prototype.initDatepicker = function() {\n        $( '.datepicker' ).datepicker({\n            dateFormat: 'yy-mm-dd',\n            firstDay: AppointmentsDateSettings.weekStart\n        });\n    };\n    \n    /**\n    * Fetches the working hours of the selected provider with ajax\n    */\n    AppointmentsList.prototype.fetchWorkerHours = function(e) {\n        \n        var $select             = $( e.target ),\n            $worker_id          = $select.val(),            \n            $parent             = $select.parents( \".inline-edit-row\" ),\n            $app_id             = $parent.find( \"select[name=service]\" ).val(),\n            $location           = $parent.find( \"select[name=location]\" ),\n            $slots_list         = $parent.find( \"select[name=time]\" ),\n            $selected_slot      = $slots_list.val(),\n            $unknown_slot       = $slots_list.children('option:first'),\n            $spinner            = $parent.find( '.waiting' ),\n            data                = {};        \n\n        $spinner.show();\n\n        /**\n        * Set up ajax data\n        */\n        data.nonce          = this.options.nonces.editApp;\n        data.action         = 'inline_fetch_worker_slots';\n        data.worker_id      = $worker_id;\n        data.app_id         = $app_id;\n        data.selected_slot  = $selected_slot;\n\n        // @TODO: Check if date is set and include that too in ajax data\n\n        if ( typeof( $location ) != \"undefined\" ) {\n            data.location_id         = $location.val();\n        }\n\n        /**\n        * Handle ajax response\n        */\n        $.post(ajaxurl, data, function(response) {\n\n            $spinner.hide();\n\n            // When receiving an error message\n            if ( response && response.error ){\n                \n                var error_msg = $('<div />',{\n                    'class' : 'error'\n                }).html( response.error );\n\n                $select.after( error_msg );\n                error_msg.delay(10000).fadeOut('slow');\n\n                return;\n\n            } else if (response) {\n                // Received the new time slots for worker\n                 var slots = JSON.parse( response.message );\n\n                // Empty the old slots list and add the unknown option\n                $slots_list.empty().append( '<option value=\"' + $unknown_slot.val() + '\">' + $unknown_slot.text() + '</option>' );\n\n                // Add the new timeslots\n                for ( var key in slots ) {\n                    $slots_list.append( slots[key] );\n                }\n            } else {\n                alert( strings.unexpectedError );\n                return;\n            }\n\n\n        }.bind(this),'json');\n    }\n\n    AppointmentsList.prototype.saveEditor = function(e) {\n        var $button = $(e.target);\n        var target = $button.parents(\".inline-edit-row\");\n        var $spinner = target.find(\".waiting\");\n\n        $spinner.show();\n\n        var fields = [\n            'user',\n            'cname',\n            'email',\n            'phone',\n            'address',\n            'city',\n            'service',\n            'worker',\n            'price',\n            'date',\n            'time',\n            'note',\n            'status'\n        ];\n\n        var data = {};\n        $.map( fields, function( fieldName ) {\n            if ( 'cname' === fieldName ) {\n                data.name = target.find( '[name=\"' + fieldName + '\"]').val();\n            }\n            else {\n                data[fieldName] = target.find( '[name=\"' + fieldName + '\"]').val();\n            }\n        });\n\n        var app_id = $button.data('app-id');\n        var cancel_button = target.find('.cancel');\n        data.app_id = app_id;\n        data.resend = target.find('input[name=\"resend\"]').is(':checked') ? 1 : 0;\n        data.nonce = this.options.nonces.editApp;\n        data.action = 'inline_edit_save';\n        $(document).trigger('app-appointment-inline_edit-save_data', [data, target]);\n\n        $.post(ajaxurl, data, function(response) {\n            $spinner.hide();\n            if ( response && response.error ){\n                target.find(\".error\").html(response.error).show().delay(10000).fadeOut('slow');\n                return;\n            } else if (response) {\n                target.find(\".error\").html(response.message).show().delay(10000).fadeOut('slow');\n            } else {\n                alert( strings.unexpectedError );\n                return;\n            }\n\n            if (!(app_id && parseInt(app_id, 10)) && response && response.app_id) {\n                location.reload();\n            }\n            else {\n                // this.removeActiveEditorForms();\n            }\n\n            if ( response.reload ){\n                location.reload();\n            }\n            cancel_button[0].innerHTML = 'Close';\n        }.bind(this),'json');\n    };\n\n    /**\n     * Helper constructor function\n     *\n     * @param options\n     * @returns {AppointmentsList}\n     */\n    global.appointmentsList = function( options ) {\n        return new AppointmentsList( options );\n    };\n\n})( AppointmentsAdmin, Appi18n, jQuery );\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./_src/admin/js/admin-appointments-list.dev.js\n// module id = 0\n// module chunks = 5"],"sourceRoot":""}