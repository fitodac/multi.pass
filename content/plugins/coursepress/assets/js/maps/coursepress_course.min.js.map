{"version":3,"sources":["coursepress_course.js"],"names":["CoursePress","Define","Request","extend","updateCourseData","this","set","off","on","courseUpdateError","save","$","View","template_id","el","courseEditor","events","keyup [name=\"post_title\"]","keyup [name=\"post_name\"]","change [name=\"meta_course_type\"]","initialize","model","EditCourse","validate","setUI","render","proceed","_","isEmpty","post_title","isTrue","payment_paid_course","course_type","course_start_date","isEmpeyt","course_end_date","enrollment_start_date","enrollment_end_date","goToNext","options","dateFormat","names","datepicker","updatePostName","ev","sender","currentTarget","slugDiv","title","val","toLowerCase","replace","trigger","updateSlug","target","html","changeCourseType","value","div","parents","siblings","removeClass","addClass","setUpUI","listing_image","AddImage","catSelect","select2","placeholder","attr","change [name=\"basic_certificate\"]","basic_certificate","certificate_background","cert_margin","top","left","right","page_orientation","toggleSetting","is_checked","is","container","background","doc","win","Unit","UnitView","UnitCollection","UnitList","className","unitsView","prototype","apply","$el","appendTo","Backbone","Collection","url","_coursepress","ajaxurl","_wpnonce","courseId","serverError","fetch","parse","response","data","courseModel","editCourse","withModules","units","get","unitCollection","setUnitsView","collection","unitsData","each","models","id","count","keys","toJSON","length","unitList","current","steps","currentStep","goNextStep","click .step","click .step-back","click .step-next","click .step-cancel","click .step-icon-bars","filter_model","CourseModel","once","courseTypeView","courseSettingsView","courseCompletionView","courseUnitsView","courseStudents","dates","d","class_size","step","getSteps","prevButton","stepListContainer","firstStep","first","lastStep","last","stepChanged","Cookie","setCurrentStep","courseType","CourseType","courseSettings","CourseSettings","courseCompletion","CourseCompletion","courseUnits","CourseUnits","courseStudentsView","push","getCurrentStep","getCurrentTab","currentTab","toggleContent","toggleStepList","getPreviousStep","stepIndex","indexOf","getNextStep","maxStep","returnToMainPage","toggleClass","course"],"mappings":"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","file":"../coursepress_course.min.js","sourcesContent":["/*! CoursePress - v3.0.0\n * https://premium.wpmudev.org/project/coursepress-pro/\n * Copyright (c) Thu Jul 06 2017; * Licensed GPLv2+ */\n/* global CoursePress */\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    CoursePress.Define('CourseModel', function(){\r\n       return CoursePress.Request.extend({\r\n           updateCourseData: function() {\r\n               this.set('action', 'update_course');\r\n               this.off('coursepress:error_update_course');\r\n               this.on('coursepress:error_update_course', this.courseUpdateError, this);\r\n               this.save();\r\n           },\r\n           courseUpdateError: function() {\r\n               // @todo: show error message\r\n           }\r\n       });\r\n    });\r\n})();\n/* global CoursePress, _ */\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    CoursePress.Define('CourseType', function($) {\r\n        return CoursePress.View.extend({\r\n            template_id: 'coursepress-course-type-tpl',\r\n            el: $('.coursepress-page #course-type'),\r\n            courseEditor: false,\r\n            events: {\r\n                'keyup [name=\"post_title\"]': 'updatePostName',\r\n                'keyup [name=\"post_name\"]': 'updateSlug',\r\n                'change [name=\"meta_course_type\"]': 'changeCourseType'\r\n            },\r\n            initialize: function(model, EditCourse) {\r\n                // Let's inherit the model object from EditCourse\r\n                this.model = model;\r\n\r\n                // Validate course type data\r\n                this.courseEditor = EditCourse;\r\n                EditCourse.on('coursepress:validate-course-type', this.validate, this);\r\n\r\n                this.on( 'view_rendered', this.setUI, this );\r\n\r\n                this.render();\r\n            },\r\n            validate: function() {\r\n                var proceed = true;\r\n\r\n                if ( _.isEmpty( this.model.post_title ) ) {\r\n                    proceed = false;\r\n                }\r\n\r\n                if ( _.isTrue( this.model.payment_paid_course) ) {\r\n                    // @todo: Validate MP and Woo\r\n                }\r\n                if ( 'manual' === this.model.course_type ) {\r\n                    // Check course dates\r\n                    if ( _.isEmpty( this.model.course_start_date ) &&\r\n                        _.isEmpeyt( this.model.course_end_date ) &&\r\n                        _.isEmpty( this.model.enrollment_start_date ) &&\r\n                        _.isEmpty( this.model.enrollment_end_date ) ) {\r\n                        proceed = false;\r\n                    }\r\n                }\r\n\r\n                if ( ! _.isTrue(proceed ) ) {\r\n                    this.courseEditor.goToNext = false;\r\n                }\r\n            },\r\n\r\n            setUI: function() {\r\n                var options = {\r\n                    dateFormat: 'MM dd, yy'\r\n                    },\r\n                    names = '[name=\"meta_course_start_date\"],[name=\"meta_course_end_date\"],[name=\"meta_enrollment_start_date\"],[name=\"enrollment_end_date\"]';\r\n\r\n                this.$( names ).datepicker( options );\r\n            },\r\n\r\n            updatePostName: function( ev ) {\r\n                var sender = $(ev.currentTarget),\r\n                    slugDiv = this.$('[name=\"post_name\"]'),\r\n                    title = sender.val();\r\n\r\n                if ( title ) {\r\n                    title = title.toLowerCase().replace( / /g, '-' );\r\n                }\r\n                slugDiv.val(title);\r\n                slugDiv.trigger('keyup');\r\n            },\r\n            updateSlug: function(ev) {\r\n                var sender = $(ev.target),\r\n                    slugDiv = this.$('.cp-slug');\r\n\r\n                slugDiv.html(sender.val());\r\n            },\r\n            changeCourseType: function(ev) {\r\n                var sender = $(ev.currentTarget),\r\n                    value = sender.val(),\r\n                    div = this.$('#type-' + value );\r\n\r\n                sender.parents('li').siblings().removeClass('active');\r\n                sender.parents('li').addClass('active');\r\n                div.siblings('.cp-course-type').removeClass('active').addClass('inactive');\r\n                div.addClass('active').removeClass('inactive');\r\n            }\r\n        });\r\n    });\r\n})();\n/* global CoursePress */\r\n\r\n(function() {\r\n    'use strict';\r\n\r\n    CoursePress.Define( 'CourseSettings', function($) {\r\n        return CoursePress.View.extend({\r\n            el: $('#course-settings'),\r\n            template_id: 'coursepress-course-settings-tpl',\r\n            courseEditor: false,\r\n            initialize: function(model, EditCourse) {\r\n                this.model = model;\r\n                this.courseEditor = EditCourse;\r\n\r\n                EditCourse.on('coursepress:validate-course-settings', this.validate, this);\r\n\r\n                this.on( 'view_rendered', this.setUpUI, this );\r\n\r\n                this.render();\r\n            },\r\n            validate: function() {\r\n                // @todo: do course settings validataion\r\n            },\r\n            setUpUI: function() {\r\n                // set feature image\r\n                this.listing_image = new CoursePress.AddImage( this.$('#listing_image') );\r\n\r\n                // set category\r\n                var catSelect = this.$('#course-categories');\r\n                catSelect.select2({\r\n                    placeholder: catSelect.attr('placeholder')\r\n                });\r\n\r\n                this.$('[name=\"meta_enrollment_type\"]').select2();\r\n            }\r\n        });\r\n    });\r\n})();\n/* global CoursePress */\r\n\r\n(function() {\r\n    'use strict';\r\n\r\n    CoursePress.Define( 'CourseCompletion', function( $ ) {\r\n        return CoursePress.View.extend({\r\n            template_id: 'coursepress-course-completion-tpl',\r\n            el: $('#course-completion'),\r\n            courseEditor: false,\r\n            events: {\r\n                'change [name=\"basic_certificate\"]': 'toggleSetting'\r\n            },\r\n            initialize: function(model, EditCourse) {\r\n                this.model = _.extend({\r\n                    basic_certificate: false,\r\n                    certificate_background: '',\r\n                    cert_margin: {\r\n                        top: 0,\r\n                        left: 0,\r\n                        right: 0\r\n                    },\r\n                    page_orientation: 'L'\r\n                }, model );\r\n                this.courseEditor = EditCourse;\r\n\r\n                this.on( 'view_rendered', this.setUpUI, this );\r\n\r\n                this.render();\r\n            },\r\n            toggleSetting: function(ev) {\r\n                var sender = $(ev.currentTarget),\r\n                    is_checked = sender.is(':checked'),\r\n                    container = this.$('#custom-certificate-setting');\r\n\r\n                container[ is_checked ? 'slideDown' : 'slideUp' ]();\r\n            },\r\n            setUpUI: function() {\r\n                this.background = new CoursePress.AddImage( this.$('[name=\"certificate_background\"]') );\r\n                this.$('select').select2();\r\n            }\r\n        });\r\n    });\r\n})();\n/* global CoursePress, Backbone */\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    CoursePress.Define('CourseUnits', function($, doc, win){\r\n        var Unit, UnitView, UnitCollection, UnitList;\r\n\r\n        Unit = CoursePress.Request.extend();\r\n        UnitView = CoursePress.View.extend({\r\n            className: 'unit-view',\r\n            template_id: 'coursepress-unit-tpl',\r\n            unitsView: false,\r\n            initialize: function( model, unitsView ) {\r\n                this.model = new Unit(model);\r\n                this.unitsView = unitsView;\r\n\r\n                this.render();\r\n            },\r\n            render: function() {\r\n                CoursePress.View.prototype.render.apply( this );\r\n                this.$el.appendTo( '#units-container' );\r\n            }\r\n        });\r\n\r\n        UnitCollection = Backbone.Collection.extend({\r\n            url: win._coursepress.ajaxurl + '?action=coursepress_get_course_units&_wpnonce=' + win._coursepress._wpnonce,\r\n            initialize: function( courseId ) {\r\n                this.url += '&course_id=' + courseId;\r\n                this.on( 'error', this.serverError, this );\r\n                this.fetch();\r\n            },\r\n            parse: function( response ) {\r\n                //win.console.log(response.data);\r\n                return response.data;\r\n            },\r\n            serverError: function() {\r\n                // @todo: show server error\r\n            }\r\n        });\r\n\r\n        UnitList = CoursePress.View.extend({\r\n            template_id: 'coursepress-unit-list-tpl'\r\n        });\r\n\r\n\r\n       return CoursePress.View.extend({\r\n           el: $('#course-units'),\r\n           courseModel: false,\r\n           editCourse: false,\r\n           courseId: 0,\r\n           withModules: true,\r\n           units: {},\r\n           initialize: function( courseModel, EditCourse ) {\r\n               this.withModules = courseModel.get('with_modules');\r\n               this.courseId = courseModel.get('ID');\r\n               this.courseModel = courseModel;\r\n               this.editCourse = EditCourse;\r\n               this.unitCollection = new UnitCollection(this.courseId);\r\n               this.unitCollection.on( 'update', this.setUnitsView, this );\r\n\r\n               if ( this.withModules ) {\r\n                   this.template_id = 'coursepress-course-units-with-modules-tpl';\r\n               } else {\r\n                   this.template_id = 'coursepress-course-units-tpl';\r\n               }\r\n\r\n               this.render();\r\n           },\r\n\r\n           setUnitsView: function( collection ) {\r\n               var unitsData = {};\r\n\r\n               _.each( collection.models, function( model ) {\r\n                   var id, count;\r\n\r\n                   id = model.get('ID');\r\n                   count = this.withModules ? model.get('modules') : model.get('steps');\r\n                   count = _.keys(count);\r\n                   new UnitView( model.toJSON(), this );\r\n                   unitsData[id] = {\r\n                       title: model.get( 'post_title' ),\r\n                       count: count.length\r\n                   };\r\n\r\n               }, this );\r\n\r\n               this.unitList = new UnitList({units: unitsData});\r\n               this.unitList.$el.appendTo( this.editCourse.current );\r\n           }\r\n       });\r\n    });\r\n})();\n/* global CoursePress, _ */\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    CoursePress.Define( 'CourseSetUp', function($, doc, win) {\r\n        var EditCourse;\r\n\r\n        EditCourse = CoursePress.View.extend({\r\n            steps: [],\r\n            currentStep: false,\r\n            goNextStep: false,\r\n            el: $('#course-edit-template'),\r\n            events: {\r\n                'click .step': 'toggleContent',\r\n                'click .step-back': 'getPreviousStep',\r\n                'click .step-next': 'getNextStep',\r\n                'click .step-cancel': 'returnToMainPage',\r\n                'click .step-icon-bars': 'toggleStepList'\r\n            },\r\n            initialize: function(model) {\r\n                model = this.filter_model(model);\r\n                this.model = new CoursePress.CourseModel(model);\r\n\r\n                // Load course-type view\r\n                this.once( 'coursepress:load-step-course-type', this.courseTypeView, this);\r\n                // Load course settings view\r\n                this.once('coursepress:load-step-course-settings', this.courseSettingsView, this);\r\n                // Load course completion view\r\n                this.once( 'coursepress:load-step-course-completion', this.courseCompletionView, this );\r\n                // Load course units view\r\n                this.once('coursepress:load-step-course-units', this.courseUnitsView, this);\r\n                // Load course students view\r\n                this.once('coursepress:load-step-course-students', this.courseStudents, this);\r\n\r\n                // Load templates\r\n                this.render();\r\n            },\r\n            filter_model: function (model) {\r\n                var dates = ['course_start_date', 'course_end_date', 'enrollment_start_date', 'enrollment_end_date'];\r\n\r\n                _.each( dates, function( d ) {\r\n                    if ( ! model[d] ) {\r\n                        model[d] = '';\r\n                    }\r\n                });\r\n\r\n                if ( ! model.class_size ) {\r\n                    model.class_size = 0;\r\n                }\r\n\r\n                return model;\r\n            },\r\n            render: function() {\r\n                var step;\r\n\r\n                // Get all steps\r\n                _.each( this.$('.cp-menu-item'), this.getSteps, this );\r\n\r\n                // Get the buttons and HTML containers\r\n                this.prevButton = this.$('.step-back');\r\n                this.stepListContainer = this.$('.cp-menu-items .course-menu');\r\n\r\n                // Setup steps positions\r\n                this.firstStep = _.first(this.steps);\r\n                this.lastStep = _.last(this.steps);\r\n\r\n                // Hook into step change event\r\n                this.on('coursepress:step-changed', this.stepChanged, this);\r\n\r\n                // Check if the browser remember the last active step and if the course is not new\r\n                if ( !_.isEmpty(this.model.get('post_title')) ) {\r\n                    step = CoursePress.Cookie('course_setup_step_' + this.model.get('ID')).get();\r\n                }\r\n\r\n                // If current step is not set, set the first step as current step\r\n                if ( ! step ) {\r\n                    step = _.first(this.steps);\r\n                }\r\n\r\n                this.setCurrentStep(step);\r\n\r\n                return this;\r\n            },\r\n            courseTypeView: function() {\r\n                var courseType = new CoursePress.CourseType(this.model, this);\r\n\r\n                return courseType;\r\n            },\r\n            courseSettingsView: function() {\r\n                var courseSettings = new CoursePress.CourseSettings(this.model, this);\r\n\r\n                return courseSettings;\r\n            },\r\n            courseCompletionView: function() {\r\n                var courseCompletion = new CoursePress.CourseCompletion(this.model, this);\r\n\r\n                return courseCompletion;\r\n            },\r\n            courseUnitsView: function() {\r\n                var courseUnits = new CoursePress.CourseUnits(this.model, this);\r\n\r\n                return courseUnits;\r\n            },\r\n            courseStudentsView: function() {},\r\n            getSteps: function(step) {\r\n                this.steps.push($(step).data('step'));\r\n            },\r\n            getCurrentStep: function() {\r\n                return this.$('[data-step=\"' + this.currentStep + '\"]');\r\n            },\r\n            setCurrentStep: function(step) {\r\n                if ( this.currentStep && step !== this.firstStep ) {\r\n                    /**\r\n                     * Trigger to validate current step and determine to whether\r\n                     * or not to load the next step.\r\n                     */\r\n                    this.trigger('coursepress:validate-' + this.currentStep);\r\n\r\n                    if ( false === this.goToNext ) {\r\n                        // One of the validation failed, return!\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Trigger before a step is changed.\r\n                 *\r\n                 * @param string step - Current selected step\r\n                 * @param object ModlaSteps instance\r\n                 */\r\n                this.trigger('coursepress:step-before-change', this.currentStep, this );\r\n\r\n                this.currentStep = step;\r\n\r\n                /**\r\n                 * Trigger whenever a step is changed.\r\n                 */\r\n                this.trigger( 'coursepress:step-changed', this.currentStep, this );\r\n\r\n                /**\r\n                 * Trigger for per step event hook\r\n                 */\r\n                this.trigger( 'coursepress:load-step-' + this.currentStep, this);\r\n\r\n                // Let the browser remember this step for a year!\r\n                CoursePress.Cookie('course_setup_step_' + this.model.get('ID')).set(this.currentStep, 86400 * 7);\r\n            },\r\n            getCurrentTab: function() {\r\n                return this.$('#' + this.currentStep);\r\n            },\r\n            stepChanged: function() {\r\n                // Toggle button\r\n                this.prevButton[ this.currentStep === this.firstStep ? 'hide' : 'show']();\r\n\r\n                this.current = this.getCurrentStep();\r\n                this.current.siblings().removeClass('active');\r\n                this.current.addClass('active');\r\n\r\n                this.currentTab = this.getCurrentTab();\r\n                this.currentTab.siblings().removeClass('tab-active').removeClass('done');\r\n                this.currentTab.addClass('tab-active');\r\n            },\r\n            toggleContent: function(ev) {\r\n                var sender = $(ev.currentTarget),\r\n                    step = sender.data('step');\r\n\r\n                if ( step === this.currentStep ) {\r\n                    return;\r\n                }\r\n\r\n                this.setCurrentStep(step);\r\n                this.toggleStepList();\r\n            },\r\n            getPreviousStep: function() {\r\n                var stepIndex = _.indexOf(this.steps, this.currentStep);\r\n\r\n                if ( stepIndex > 0 ) {\r\n                    stepIndex -= 1;\r\n                    this.setCurrentStep(this.steps[stepIndex]);\r\n                }\r\n            },\r\n            getNextStep: function() {\r\n                var stepIndex, maxStep;\r\n\r\n                stepIndex = _.indexOf(this.steps, this.currentStep);\r\n                maxStep = this.steps.length - 1;\r\n\r\n                if ( stepIndex < maxStep ) {\r\n                    stepIndex += 1;\r\n\r\n                    // Try to load next step\r\n                    this.setCurrentStep(this.steps[stepIndex]);\r\n\r\n                    if ( false === this.goToNext ) {\r\n                        // Return if next step is not loaded\r\n                        return;\r\n                    }\r\n\r\n                    /**\r\n                     * Trigger whenever next step is activated\r\n                     *\r\n                     * @param string step\r\n                     * @param object StepsModal instance\r\n                     */\r\n                    this.trigger('coursepress:next-step-activated', this.steps[stepIndex], this);\r\n\r\n                    if ( this.currentStep === this.lastStep ) {\r\n                        /**\r\n                         * Trigger when the last step is reached.\r\n                         *\r\n                         * @param string step\r\n                         * @param object StepsModal instance\r\n                         */\r\n                        this.trigger('coursepress:lastStepActivated', this.currentStep, this);\r\n                    }\r\n                }\r\n\r\n                // Rebirth to loading next step into false to re-apply validation\r\n                this.goNextStep = false;\r\n            },\r\n            returnToMainPage: function() {},\r\n\r\n            toggleStepList: function() {\r\n                this.stepListContainer.toggleClass('open', '');\r\n            }\r\n        });\r\n\r\n        // Init course edit on first load\r\n        EditCourse = new EditCourse(win._coursepress.course);\r\n    });\r\n})();"]}