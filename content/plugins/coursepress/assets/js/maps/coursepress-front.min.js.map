{"version":3,"sources":["coursepress-front.js"],"names":["window","CoursePress","$","doc","win","self","Events","Backbone","Define","name","callback","call","Cookie","cookie_name","cookies","_coursepress","cookie","hash","get","split","map","this","trim","toObject","set","cookie_value","time","d","expires","Date","getTime","parseInt","path","unset","jQuery","document","Model","extend","url","ajaxurl","defaults","_wpnonce","initialize","on","serverError","prototype","apply","arguments","parse","response","action","success","trigger","data","_","mixin","isTrue","value","selected","isArray","contains","isObject","isBoolean","checked","_getTemplate","template_id","settings","evaluate","interpolate","escape","tpl","length","template","html","View","model","events","change [name]","Request","render","isEmpty","toJSON","$el","updateModel","ev","input","type","currentTarget","attr","is","val","Progress","animation","duration","circleProgress","fill","color","fillColor","emptyFill","animationProgress","e","v","obj","ctx","s","size","sv","toFixed","ov","save","knobTextShow","font","knobTextDenominator","textAlign","knobTextAlign","textBaseline","fillStyle","knobTextColor","fillText","restore","each","UnitProgress","el"],"mappings":"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","file":"../coursepress-front.min.js","sourcesContent":["/*! CoursePress - v3.0.0\n * https://premium.wpmudev.org/project/coursepress-pro/\n * Copyright (c) Thu Jul 06 2017; * Licensed GPLv2+ */\n/* jshint -W065 */\r\n/* global jQuery, Backbone */\r\n\r\n(function() {\r\n    'use strict';\r\n\r\n    window.CoursePress = (function ($, doc, win) {\r\n        var self = {\r\n            Events: Backbone.Events || {}\r\n        };\r\n\r\n        self.Define = function (name, callback) {\r\n\r\n            if ( !self[name] ) {\r\n                self[name] = callback.call(null, $, doc, win);\r\n            }\r\n        };\r\n\r\n        self.Cookie = function( cookie_name ) {\r\n            var cookies, name;\r\n\r\n                cookies = {},\r\n                name = cookie_name + '_' + win._coursepress.cookie.hash;\r\n\r\n            return {\r\n                get: function() {\r\n                    // Get the list of available cookies\r\n                    doc.cookie.split(';').map(this.trim).map(this.toObject);\r\n\r\n                    return cookies[name] ? cookies[name] : null;\r\n                },\r\n                set: function( cookie_value, time ) {\r\n                    var d, expires;\r\n                    d = new Date();\r\n                    expires = d.getTime() + parseInt(time);\r\n\r\n                    doc.cookie = name + '=' + cookie_value + ';expires=' + expires + ';path=' + win._coursepress.cookie.path;\r\n                },\r\n                unset: function() {\r\n\r\n                },\r\n                trim: function(cookie) {\r\n                    cookie = cookie.trim();\r\n                    return cookie;\r\n                },\r\n                toObject: function(cookie) {\r\n                    cookie = cookie.split('=');\r\n                    cookies[cookie[0]] = cookie[1];\r\n                }\r\n            };\r\n        };\r\n\r\n        return self;\r\n    }(jQuery, document, window));\r\n})();\r\n\n/* global CoursePress, Backbone */\r\n\r\n(function() {\r\n    'use strict';\r\n\r\n    CoursePress.Define('Request', function ($, doc, win) {\r\n        return Backbone.Model.extend({\r\n            url: win._coursepress.ajaxurl + '?action=coursepress_request',\r\n            defaults: {\r\n                _wpnonce: win._coursepress._wpnonce\r\n            },\r\n\r\n            initialize: function () {\r\n                this.on('error', this.serverError, this);\r\n\r\n                Backbone.Model.prototype.initialize.apply(this, arguments);\r\n            },\r\n\r\n            parse: function ( response ) {\r\n                var action = this.get('action');\r\n\r\n                if ( response.success ) {\r\n                    this.trigger('coursepress:success_' + action, response.data);\r\n                } else {\r\n                    this.trigger('coursepress:error_' + action, response.data);\r\n                }\r\n            },\r\n\r\n            serverError: function () {\r\n                // @todo: Show friendly error here\r\n            }\r\n        });\r\n    });\r\n})();\n/* global CoursePress, _, Backbone */\r\n\r\n(function(){\r\n    'use strict';\r\n\r\n    CoursePress.Define('View', function ($) {\r\n        _.mixin({\r\n            isTrue: function (value, selected) {\r\n                if (_.isArray(selected) ) {\r\n                    return _.contains(selected, value);\r\n                } else if (_.isObject(selected ) ) {\r\n                    return !!selected[value];\r\n                } else {\r\n                    if ( _.isBoolean( value ) ) {\r\n                        selected = parseInt(selected, 10) > 0 ? true : false;\r\n                    }\r\n                    return value === selected;\r\n                }\r\n            },\r\n            checked: function (value, selected) {\r\n                return _.isTrue(value, selected) ? 'checked=\"checked\"' : '';\r\n            },\r\n            selected: function (value, selected) {\r\n                return _.isTrue(value, selected) ? 'selected=\"selected\"' : '';\r\n            },\r\n            _getTemplate: function (template_id, data) {\r\n                var settings = {\r\n                        evaluate: /<#([\\s\\S]+?)#>/g,\r\n                        interpolate: /\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/g,\r\n                        escape: /\\{\\{([^\\}]+?)\\}\\}(?!\\})/g\r\n                    },\r\n                    tpl = $('#' + template_id);\r\n\r\n                if ( tpl.length ) {\r\n                    tpl = _.template( tpl.html(), null, settings);\r\n                }\r\n\r\n                return tpl(data);\r\n            }\r\n        });\r\n\r\n        return Backbone.View.extend({\r\n            template_id: '',\r\n            model: {},\r\n            events: {\r\n                'change [name]': 'updateModel'\r\n            },\r\n            initialize: function () {\r\n                if (arguments && arguments[0]) {\r\n                    this.model = new CoursePress.Request(arguments[0]);\r\n                }\r\n                this.render();\r\n            },\r\n            render: function () {\r\n                if ( ! _.isEmpty(this.template_id) ) {\r\n                    var data = !!this.model.get ? this.model.toJSON() : this.model;\r\n                    this.$el.html(_._getTemplate(this.template_id, data));\r\n                }\r\n\r\n                this.trigger( 'view_rendered' );\r\n\r\n                /**\r\n                 * Trigger whenever the view template is loaded\r\n                 */\r\n                CoursePress.Events.trigger('coursepress:view_rendered', this);\r\n\r\n                return this;\r\n            },\r\n            updateModel: function(ev) {\r\n                var input, name, type, value;\r\n\r\n                input = $(ev.currentTarget);\r\n                name = input.attr('name');\r\n\r\n                if ( ( type = input.attr('type') ) &&\r\n                    _.contains(['checkbox', 'radio'], type ) ) {\r\n                    value = input.is(':checked') ? input.val() : false;\r\n                } else {\r\n                    value = input.val();\r\n                }\r\n\r\n                if ( !!this.model.get ) {\r\n                    this.model.set(name, value);\r\n                } else {\r\n                    this.model[name] = value;\r\n                }\r\n            }\r\n        });\r\n    });\r\n})();\n/* global CoursePress */\r\n\r\n(function() {\r\n    'use strict';\r\n\r\n    CoursePress.Define( 'CourseOverview', function( $ ) {\r\n        var Progress;\r\n\r\n        Progress = CoursePress.View.extend({\r\n            render: function() {\r\n                var data = _.extend({\r\n                    animation: {duration: 1200}\r\n                }, this.$el.data() );\r\n\r\n                this.$el.circleProgress({\r\n                    fill: {\r\n                        color: data.fillColor\r\n                    },\r\n                    emptyFill: data.emptyFill,\r\n                    animation: data.animation\r\n                });\r\n\r\n                this.data = data;\r\n                this.$el.on( 'circle-animation-progress', this.animationProgress );\r\n            },\r\n\r\n            animationProgress: function( e, v ) {\r\n                var obj = $(this).data( 'circle-progress' ),\r\n                    ctx = obj.ctx,\r\n                    s = obj.size,\r\n                    sv = (100 * v).toFixed(),\r\n                    ov = (100 * obj.value ).toFixed();\r\n                sv = 100 - sv;\r\n\r\n                if ( sv < ov ) {\r\n                    sv = ov;\r\n                }\r\n                ctx.save();\r\n\r\n                if ( obj.knobTextShow ) {\r\n                    ctx.font = s / obj.knobTextDenominator + 'px sans-serif';\r\n                    ctx.textAlign = obj.knobTextAlign;\r\n                    ctx.textBaseline = 'middle';\r\n                    ctx.fillStyle = obj.knobTextColor;\r\n                    ctx.fillText( sv + '%', s / 2 + s / 80, s / 2 );\r\n                }\r\n\r\n                ctx.restore();\r\n            }\r\n        });\r\n\r\n        $('.course-progress-disc').each(function() {\r\n            var UnitProgress = Progress.extend({\r\n                el: this\r\n            });\r\n            UnitProgress = new UnitProgress();\r\n        });\r\n    });\r\n})();"]}